#   Copyright 2018 The Batfish Open Source Project
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# Run all policies on the specified snapshot.
#
# Inputs:
#   bf_candidate_snapshot: Name of the snapshot to run policies on
#   bf_network: Name of the network containing the snapshot
#   external_tests: List of tests already run
#   external_results: Results of tests already run
# Saved variables:
#   tests: List of tests run (including external_tests)
#   results: Results of tests run (including external_results)
---
- name: Validate candidate snapshot
  connection: local
  hosts: localhost
  gather_facts: no


  vars:
    tests: []
    results: {}


  tasks:
    - meta: end_play
      when: skip is defined and skip
      tags: always

    - name: Analyze candidate snapshot
      batfish_policy:
        name: "{{ bf_candidate_snapshot }}"
        network: "{{ bf_network }}"
      register: policy
      tags: always

    - name: Show policy result
      debug:
        var: policy.summary
      tags: always

    - name: Show policy details
      debug:
        var: policy.result
      when: policy.summary != "PASS"
      tags: always

    - name: Copy passed in tests
      set_fact:
        tests: "{{ external_tests }}"
      when: external_tests is defined
      tags: always

    - name: Copy passed in results
      set_fact:
        results: "{{ external_results }}"
      when: external_results is defined
      tags: always

    - name: Export summary
      set_fact:
        summary: "{{ policy.summary }}"
      tags: always

    - name: Update tests list
      set_fact:
        tests: "{{ tests }} + ['{{ item.key }}']"
      with_dict: "{{ policy.result }}"
      tags: always

    - name: Update results
      set_fact:
        results: "{{ results | combine(policy, recursive=True) }}"
      tags: always

